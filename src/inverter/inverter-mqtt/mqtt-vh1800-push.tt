<#@ template debug="false" hostspecific="true" language="shell" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".sh" #>
#!/bin/bash

get_config () {
    jq -r --arg param "$1" '.[$param]' < /app/mqtt.json
}

MQTT_SERVER="$(get_config server)"
MQTT_PORT="$(get_config port)"
MQTT_TOPIC="$(get_config topic)"
MQTT_DEVICENAME="$(get_config devicename)"
MQTT_USERNAME="$(get_config username)"
MQTT_PASSWORD="$(get_config password)"

pushMQTTData () {
    local var="$1" value
    value="$(echo "$INVERTER_DATA" | jq --arg var "$var" '.[$var]' -r)"
    if [ -z "$value" ]; then
        return $?
    fi

    mosquitto_pub \
        -h "$MQTT_SERVER" \
        -p "$MQTT_PORT" \
        -u "$MQTT_USERNAME" \
        -P "$MQTT_PASSWORD" \
        -t "$MQTT_TOPIC/sensor/${MQTT_DEVICENAME}_$var" \
        -m "$value"
}

SENSORS=(
<#
    string sensorsPath = this.Host.ResolvePath($"..\\Ph1800.json");
    string sensorsJson = File.ReadAllText(sensorsPath);
    var sensors = JArray.Parse(sensorsJson);

    foreach(var sensor in sensors)
    {
        if (sensor.Value<bool>("Publish") == false) continue;

        WriteLine($"    {sensor["Name"]}");
    }
#>

    # Composite
    BatteryPercent
    AccumulatedChargerPower
    AccumulatedDischargerPower
    AccumulatedBuyPower
    AccumulatedSellPower
    AccumulatedLoadPower
    AccumulatedSelfusePower
    AccumulatedPvsellPower
    AccumulatedGridChargerPower
    AccumulatedPvPower
)

INVERTER_DATA="$(timeout 10 dotnet inverter.dll poll -a=false)"

for sensor in "${SENSORS[@]}"; do
    pushMQTTData "$sensor"
done