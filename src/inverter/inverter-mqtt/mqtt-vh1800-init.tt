<#@ template debug="false" hostspecific="true" language="shell" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".sh" #>
#!/bin/bash
#
# Simple script to register the MQTT topics when the container starts for the first time...

get_config () {
    jq -r --arg param "$1" '.[$param]' < /app/mqtt.json
}

MQTT_SERVER="$(get_config server)"
MQTT_PORT="$(get_config port)"
MQTT_TOPIC="$(get_config topic)"
MQTT_DEVICENAME="$(get_config devicename)"
MQTT_USERNAME="$(get_config username)"
MQTT_PASSWORD="$(get_config password)"

# Splits arguments pairwise and interprets them as key: value to put
# them into a json dict
pairs_to_dict () {
    jq -r --null-input '[
        range(($ARGS.positional | length) / 2 | floor) | .*2 |
        {"key": ($ARGS.positional[.]), "value": $ARGS.positional[.+1]}
    ] | from_entries' --args "$@"
}

registerTopic () {
    mosquitto_pub \
        -h "$MQTT_SERVER" \
        -p "$MQTT_PORT" \
        -u "$MQTT_USERNAME" \
        -P "$MQTT_PASSWORD" \
        -t "$MQTT_TOPIC/sensor/${MQTT_DEVICENAME}_$1/config" \
        -m "$(pairs_to_dict \
            name                "${MQTT_DEVICENAME}_$1" \
            unit_of_measurement "$2" \
            state_topic         "$MQTT_TOPIC/sensor/${MQTT_DEVICENAME}_$1" \
            icon                "mdi:$3"
        )"
}

registerInverterRawCMD () {
    mosquitto_pub \
        -h "$MQTT_SERVER" \
        -p "$MQTT_PORT" \
        -u "$MQTT_USERNAME" \
        -P "$MQTT_PASSWORD" \
        -t "$MQTT_TOPIC/sensor/$MQTT_DEVICENAME/config" \
        -m "$(pairs_to_dict \
            name        "$MQTT_DEVICENAME" \
            state_topic "$MQTT_TOPIC/sensor/$MQTT_DEVICENAME" \
        )"
}

<#
    string sensorsPath = this.Host.ResolvePath($"..\\Ph1800.json");
    string sensorsJson = File.ReadAllText(sensorsPath);
    var sensors = JArray.Parse(sensorsJson);

    foreach(var sensor in sensors)
    {
        if (sensor.Value<bool>("Publish") == false) continue;

        WriteLine($"registerTopic   {"\"" + sensor["Name"] + "\"", -40}   {"\"" + sensor["Uom"] + "\"", -15}    {"\"" + sensor["Icon"] + "\""}");
    }
#>

# Register composite topics manually for now

registerTopic "BatteryPercent"                             "%"       "battery"

registerTopic "AccumulatedChargerPower"                    "KWH"     "chart-bell-curve-cumulative"
registerTopic "AccumulatedDischargerPower"                 "KWH"     "chart-bell-curve-cumulative"
registerTopic "AccumulatedBuyPower"                        "KWH"     "chart-bell-curve-cumulative"
registerTopic "AccumulatedSellPower"                       "KWH"     "chart-bell-curve-cumulative"
registerTopic "AccumulatedLoadPower"                       "KWH"     "chart-bell-curve-cumulative"
registerTopic "AccumulatedSelfusePower"                    "KWH"     "chart-bell-curve-cumulative"
registerTopic "AccumulatedPvsellPower"                     "KWH"     "chart-bell-curve-cumulative"
registerTopic "AccumulatedGridChargerPower"                "KWH"     "chart-bell-curve-cumulative"
registerTopic "AccumulatedPvPower"                         "KWH"     "chart-bell-curve-cumulative"

# Register topic for push commands
registerInverterRawCMD
